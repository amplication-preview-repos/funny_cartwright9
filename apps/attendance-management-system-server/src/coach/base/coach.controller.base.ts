/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CoachService } from "../coach.service";
import { CoachCreateInput } from "./CoachCreateInput";
import { Coach } from "./Coach";
import { CoachFindManyArgs } from "./CoachFindManyArgs";
import { CoachWhereUniqueInput } from "./CoachWhereUniqueInput";
import { CoachUpdateInput } from "./CoachUpdateInput";

export class CoachControllerBase {
  constructor(protected readonly service: CoachService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Coach })
  async createCoach(@common.Body() data: CoachCreateInput): Promise<Coach> {
    return await this.service.createCoach({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Coach] })
  @ApiNestedQuery(CoachFindManyArgs)
  async coaches(@common.Req() request: Request): Promise<Coach[]> {
    const args = plainToClass(CoachFindManyArgs, request.query);
    return this.service.coaches({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Coach })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async coach(
    @common.Param() params: CoachWhereUniqueInput
  ): Promise<Coach | null> {
    const result = await this.service.coach({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Coach })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCoach(
    @common.Param() params: CoachWhereUniqueInput,
    @common.Body() data: CoachUpdateInput
  ): Promise<Coach | null> {
    try {
      return await this.service.updateCoach({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Coach })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCoach(
    @common.Param() params: CoachWhereUniqueInput
  ): Promise<Coach | null> {
    try {
      return await this.service.deleteCoach({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
